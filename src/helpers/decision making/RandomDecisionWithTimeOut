 class RandomDecisionWithTimeOut extends Decision:
2 lastFrame: int = -1
3 currentDecision: bool = false
4
5// Make a new decision after this number of frames.
6 timeOut: int = 1000
7 timeOutFrame: int = -1
8
9 fn testValue() -> bool:
10 frame = getCurrentFrame()
11
12// Check if our stored decision is too old.
13 if frame > lastFrame + 1 or frame >= timeOutFrame:
14// Make a new decision and store it.
15 currentDecision = randomBoolean()
16
17// Schedule the next new decision.
18 timeOutFrame = frame + timeOut
19
20// Either way we need to store when we were last called.
21 lastFrame = frame
22
23 return currentDecision