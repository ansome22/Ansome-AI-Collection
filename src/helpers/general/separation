
1 class Separation:
2 character: Kinematic
3 maxAcceleration: f64
4
5// A list of potential targets.
6 targets: Kinematic[]
7
8// The threshold to take action.
9 threshold: f64
10
11// The constant coefficient of decay for the inverse square law.
12 decayCoefficient: f64
13
14 fn getSteering() -> SteeringOutput:
15 result = new SteeringOutput()
16
17// Loop through each target.
18 for target in targets:
19// Check if the target is close.
20 direction = target.position - character.position
21 distance = direction.length()
22
23 if distance < threshold:
24// Calculate the strength of repulsion
25// (here using the inverse square law).
26 strength = min(
27 decayCoefficient / (distance * distance),
28 maxAcceleration)
29
30// Add the acceleration.
31 direction.normalize()
32 result.linear += strength * direction
33
34 return result
